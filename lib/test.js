// Generated by CoffeeScript 1.12.0
(function () {
	var $, $$, AdvancedFileView, BufferedProcess, TextEditorView, View, fs, mkdirp, path, ref, touch,
		extend = function (child, parent) {
			for (var key in parent) {
				if (hasProp.call(parent, key)) child[key] = parent[key];
			}
			function ctor() {
				this.constructor = child;
			}

			ctor.prototype = parent.prototype;
			child.prototype = new ctor();
			child.__super__ = parent.prototype;
			return child;
		},
		hasProp = {}.hasOwnProperty;

	BufferedProcess = require('atom').BufferedProcess;

	ref = require('atom-space-pen-views'), $ = ref.$, $$ = ref.$$, View = ref.View, TextEditorView = ref.TextEditorView;

	fs = require('fs');

	path = require('path');

	mkdirp = require('mkdirp');

	touch = require('touch');

	module.exports = AdvancedFileView = (function (superClass) {
		extend(AdvancedFileView, superClass);

		function AdvancedFileView() {
			return AdvancedFileView.__super__.constructor.apply(this, arguments);
		}

		AdvancedFileView.prototype.PATH_SEPARATOR = ",";

		AdvancedFileView.prototype.advancedFileView = null;

		AdvancedFileView.prototype.keyUpListener = null;

		AdvancedFileView.config = {
			removeWholeFolder: {
				type: 'boolean',
				"default": true
			},
			suggestCurrentFilePath: {
				type: 'boolean',
				"default": false
			},
			showFilesInAutoComplete: {
				type: 'boolean',
				"default": false
			},
			caseSensitiveAutoCompletion: {
				type: 'boolean',
				"default": false
			},
			addTextFromSelection: {
				type: 'boolean',
				"default": false
			},
			createFileInstantly: {
				type: 'boolean',
				"default": false
			}
		};

		AdvancedFileView.activate = function (state) {
			this.advancedFileView = new AdvancedFileView(state.advancedFileViewState);
			try {
				return this.seenNotification = JSON.parse(state).seenNotification;
			} catch (error1) {
				return this.seenNotification = false;
			}
		};

		AdvancedFileView.serialize = function () {
			return JSON.stringify({
				seenNotification: this.seenNotification
			});
		};

		AdvancedFileView.deactivate = function () {
			return this.advancedFileView.detach();
		};

		AdvancedFileView.content = function (params) {
			return this.div({
				"class": 'advanced-new-file'
			}, (function (_this) {
				return function () {
					_this.div({
						outlet: 'mainUI'
					}, function () {
						_this.p({
							outlet: 'message',
							"class": 'icon icon-file-add'
						}, "Enter the path for the new file/directory. Directories end with a '" + path.sep + "'.");
						_this.subview('miniEditor', new TextEditorView({
							mini: true
						}));
						return _this.ul({
							"class": 'list-group',
							outlet: 'directoryList'
						});
					});
					return _this.div({
						outlet: 'notificationUI'
					}, function () {
						_this.h2({
							"class": 'icon icon-info'
						}, "Advanced New File is no longer maintained");
						_this.p(function () {
							return _this.raw("advanced-new-file won't be getting any more updates, but the project\nhas been forked as <a href=\"https://atom.io/packages/advanced-open-file\">advanced-open-file</a>.\nThe fork opens files as well as creating them, and adds several new features.");
						});
						_this.p(function () {
							return _this.text("Click the Update button below to replace advanced-new-file with\nadvanced-open-file (the current window will be reloaded). Otherwise,\nclick the No Thanks button and this message will not appear again.");
						});
						return _this.div({
							"class": 'btn-toolbar'
						}, function () {
							_this.div({
								"class": 'btn-group'
							}, function () {
								return _this.button({
									outlet: 'closeNotification',
									"class": 'btn'
								}, "No thanks");
							});
							return _this.div({
								"class": 'btn-group'
							}, function () {
								return _this.button({
									outlet: 'replacePackageBtn',
									"class": 'btn btn-success'
								}, "Update");
							});
						});
					});
				};
			})(this));
		};

		AdvancedFileView.detaching = false;

		AdvancedFileView.prototype.initialize = function (serializeState) {
			atom.commands.add('atom-workspace', 'advanced-new-file:toggle', (function (_this) {
				return function () {
					return _this.toggle();
				};
			})(this));
			this.miniEditor.getModel().setPlaceholderText(path.join('path', 'to', 'file.txt'));
			return atom.commands.add(this.element, {
				'core:confirm': (function (_this) {
					return function () {
						return _this.confirm();
					};
				})(this),
				'core:cancel': (function (_this) {
					return function () {
						return _this.detach();
					};
				})(this)
			});
		};

		AdvancedFileView.prototype.referenceDir = function () {
			var homeDir;
			homeDir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
			return atom.project.getPaths()[0] || homeDir;
		};

		AdvancedFileView.prototype.inputPath = function () {
			var input;
			input = this.getLastSearchedFile();
			return path.join(this.referenceDir(), input.substr(0, input.lastIndexOf(path.sep)));
		};

		AdvancedFileView.prototype.inputFullPath = function () {
			var input;
			input = this.getLastSearchedFile();
			return path.join(this.referenceDir(), input);
		};

		AdvancedFileView.prototype.getLastSearchedFile = function () {
			var commanIndex, input;
			input = this.miniEditor.getText();
			commanIndex = input.lastIndexOf(this.PATH_SEPARATOR) + 1;
			return input.substring(commanIndex, input.length);
		};

		AdvancedFileView.prototype.getFileList = function (callback) {
			var input;
			input = this.getLastSearchedFile();
			return fs.stat(this.inputPath(), (function (_this) {
				return function (err, stat) {
					if ((err != null ? err.code : void 0) === 'ENOENT') {
						return [];
					}
					return fs.readdir(_this.inputPath(), function (err, files) {
						var dirList, fileList;
						fileList = [];
						dirList = [];
						files.forEach(function (filename) {
							var caseSensitive, fragment, isDir, matches;
							fragment = input.substr(input.lastIndexOf(path.sep) + 1, input.length);
							caseSensitive = atom.config.get('advanced-new-file.caseSensitiveAutoCompletion');
							if (!caseSensitive) {
								fragment = fragment.toLowerCase();
							}
							matches = caseSensitive && filename.indexOf(fragment) === 0 || !caseSensitive && filename.toLowerCase().indexOf(fragment) === 0;
							if (matches) {
								try {
									isDir = fs.statSync(path.join(_this.inputPath(), filename)).isDirectory();
								} catch (error1) {

								}
								return (isDir ? dirList : fileList).push({
									name: filename,
									isDir: isDir
								});
							}
						});
						if (atom.config.get('advanced-new-file.showFilesInAutoComplete')) {
							return callback.apply(_this, [dirList.concat(fileList)]);
						} else {
							return callback.apply(_this, [dirList]);
						}
					});
				};
			})(this));
		};

		AdvancedFileView.prototype.autocomplete = function (str) {
			return this.getFileList(function (files) {
				var file, indexOfString, longestPrefix, newPath, newString, oldInputText, suffix, textWithoutSuggestion;
				newString = str;
				oldInputText = this.miniEditor.getText();
				indexOfString = oldInputText.lastIndexOf(str);
				textWithoutSuggestion = oldInputText.substring(0, indexOfString);
				if ((files != null ? files.length : void 0) === 1) {
					newPath = path.join(this.inputPath(), files[0].name);
					suffix = files[0].isDir ? path.sep : '';
					return this.updatePath(newPath + suffix, textWithoutSuggestion);
				} else if ((files != null ? files.length : void 0) > 1) {
					longestPrefix = this.longestCommonPrefix((function () {
						var i, len, results;
						results = [];
						for (i = 0, len = files.length; i < len; i++) {
							file = files[i];
							results.push(file.name);
						}
						return results;
					})());
					newPath = path.join(this.inputPath(), longestPrefix);
					if (newPath.length > this.inputFullPath().length) {
						return this.updatePath(newPath, textWithoutSuggestion);
					} else {
						return atom.beep();
					}
				} else {
					return atom.beep();
				}
			});
		};

		AdvancedFileView.prototype.updatePath = function (newPath, oldPath) {
			var relativePath;
			relativePath = oldPath + atom.project.relativize(newPath);
			return this.miniEditor.setText(relativePath);
		};

		AdvancedFileView.prototype.update = function () {
			this.getFileList(function (files) {
				return this.renderAutocompleteList(files);
			});
			if (/\/$/.test(this.miniEditor.getText())) {
				return this.setMessage('file-directory-create');
			} else {
				return this.setMessage('file-add');
			}
		};

		AdvancedFileView.prototype.setMessage = function (icon, str) {
			this.message.removeClass('icon' + ' icon-file-add' + ' icon-file-directory-create' + ' icon-alert');
			if (icon != null) {
				this.message.addClass('icon icon-' + icon);
			}
			return this.message.text(str || "Enter the path for the new file/directory. Directories end with a '" + path.sep + "'.");
		};

		AdvancedFileView.prototype.renderAutocompleteList = function (files) {
			this.directoryList.empty();
			return files != null ? files.forEach((function (_this) {
				return function (file) {
					var icon;
					icon = file.isDir ? 'icon-file-directory' : 'icon-file-text';
					return _this.directoryList.append($$(function () {
						return this.li({
							"class": 'list-item'
						}, (function (_this) {
							return function () {
								return _this.span({
									"class": "icon " + icon
								}, file.name);
							};
						})(this));
					}));
				};
			})(this)) : void 0;
		};

		AdvancedFileView.prototype.confirm = function () {
			var createWithin, error, i, len, pathToCreate, relativePath, relativePaths;
			relativePaths = this.miniEditor.getText().split(this.PATH_SEPARATOR);
			for (i = 0, len = relativePaths.length; i < len; i++) {
				relativePath = relativePaths[i];
				pathToCreate = path.join(this.referenceDir(), relativePath);
				createWithin = path.dirname(pathToCreate);
				try {
					if (/\/$/.test(pathToCreate)) {
						mkdirp(pathToCreate);
					} else {
						if (atom.config.get('advanced-new-file.createFileInstantly')) {
							if (!(fs.existsSync(createWithin) && fs.statSync(createWithin))) {
								mkdirp(createWithin);
							}
							touch(pathToCreate);
						}
						atom.workspace.open(pathToCreate);
					}
				} catch (error1) {
					error = error1;
					this.setMessage('alert', error.message);
				}
			}
			return this.detach();
		};

		AdvancedFileView.prototype.detach = function () {
			var miniEditorFocused, ref1;
			if (!this.hasParent()) {
				return;
			}
			this.detaching = true;
			this.miniEditor.setText('');
			this.setMessage();
			this.directoryList.empty();
			miniEditorFocused = this.miniEditor.isFocused;
			this.keyUpListener.off();
			AdvancedFileView.__super__.detach.apply(this, arguments);
			if ((ref1 = this.panel) != null) {
				ref1.hide();
			}
			if (miniEditorFocused) {
				this.restoreFocus();
			}
			return this.detaching = false;
		};

		AdvancedFileView.prototype.attach = function () {
			var consumeKeypress, selection, text;
			this.suggestPath();
			this.previouslyFocusedElement = $(':focus');
			this.panel = atom.workspace.addModalPanel({
				item: this
			});
			if (this.seenNotification) {
				this.mainUI.removeClass('hidden');
				this.notificationUI.addClass('hidden');
			} else {
				this.notificationUI.removeClass('hidden');
				this.mainUI.addClass('hidden');
			}
			this.closeNotification.on('click', (function (_this) {
				return function (ev) {
					_this.seenNotification = true;
					_this.mainUI.removeClass('hidden');
					return _this.notificationUI.addClass('hidden');
				};
			})(this));
			this.replacePackageBtn.on('click', (function (_this) {
				return function (ev) {
					_this.seenNotification = true;
					_this.detach();
					return _this.replacePackage();
				};
			})(this));
			this.miniEditor.on('focusout', (function (_this) {
				return function () {
					if (!_this.detaching) {
						return _this.detach();
					}
				};
			})(this));
			this.miniEditor.focus();
			consumeKeypress = (function (_this) {
				return function (ev) {
					ev.preventDefault();
					return ev.stopPropagation();
				};
			})(this);
			this.miniEditor.getModel().onDidChange((function (_this) {
				return function () {
					return _this.update();
				};
			})(this));
			this.miniEditor.on('keydown', (function (_this) {
				return function (ev) {
					if (ev.keyCode === 9) {
						return consumeKeypress(ev);
					}
				};
			})(this));
			this.keyUpListener = this.miniEditor.on('keyup', (function (_this) {
				return function (ev) {
					var absolutePathToFile, editorText, fileSep, pathSepIndex, pathToComplete, substr;
					if (ev.keyCode === 9) {
						consumeKeypress(ev);
						pathToComplete = _this.getLastSearchedFile();
						return _this.autocomplete(pathToComplete);
					} else if (ev.keyCode === 8) {
						if (atom.config.get('advanced-new-file.removeWholeFolder')) {
							absolutePathToFile = _this.inputFullPath();
							if (fs.existsSync(absolutePathToFile) && fs.statSync(absolutePathToFile)) {
								editorText = _this.miniEditor.getText();
								pathSepIndex = editorText.lastIndexOf(path.sep) + 1;
								fileSep = editorText.lastIndexOf(_this.PATH_SEPARATOR);
								substr = Math.max(pathSepIndex, fileSep);
								return _this.miniEditor.setText(editorText.substring(0, substr));
							}
						}
					}
				};
			})(this));
			if (atom.config.get('advanced-new-file.addTextFromSelection') && atom.workspace.getActiveTextEditor()) {
				selection = atom.workspace.getActiveTextEditor().getSelection();
				if (selection.empty == null) {
					text = this.miniEditor.getText() + selection.getText();
					this.miniEditor.setText(text);
				}
			}
			this.miniEditor.focus();
			return this.getFileList(function (files) {
				return this.renderAutocompleteList(files);
			});
		};

		AdvancedFileView.prototype.suggestPath = function () {
			var activeDir, activePath, ref1, suggestedPath;
			if (atom.config.get('advanced-new-file.suggestCurrentFilePath')) {
				activePath = (ref1 = atom.workspace.getActiveTextEditor()) != null ? ref1.getPath() : void 0;
				if (activePath) {
					activeDir = path.dirname(activePath) + path.sep;
					suggestedPath = path.relative(this.referenceDir(), activeDir);
					return this.miniEditor.setText(suggestedPath + path.sep);
				}
			}
		};

		AdvancedFileView.prototype.toggle = function () {
			if (this.hasParent()) {
				return this.detach();
			} else {
				return this.attach();
			}
		};

		AdvancedFileView.prototype.restoreFocus = function () {
			var ref1;
			if ((ref1 = this.previouslyFocusedElement) != null ? ref1.isOnDom() : void 0) {
				return this.previouslyFocusedElement.focus();
			}
		};

		AdvancedFileView.prototype.longestCommonPrefix = function (fileNames) {
			var fileIndex, fileName, i, j, longestCommonPrefix, nextCharacter, prefixIndex, ref1, ref2;
			if ((fileNames != null ? fileNames.length : void 0) === 0) {
				return "";
			}
			longestCommonPrefix = "";
			for (prefixIndex = i = 0, ref1 = fileNames[0].length - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; prefixIndex = 0 <= ref1 ? ++i : --i) {
				nextCharacter = fileNames[0][prefixIndex];
				for (fileIndex = j = 0, ref2 = fileNames.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; fileIndex = 0 <= ref2 ? ++j : --j) {
					fileName = fileNames[fileIndex];
					if (fileName.length < prefixIndex || fileName[prefixIndex] !== nextCharacter) {
						return longestCommonPrefix;
					}
				}
				longestCommonPrefix += nextCharacter;
			}
			return longestCommonPrefix;
		};

		AdvancedFileView.prototype.executeApm = function (args, exit) {
			return new BufferedProcess({
				command: atom.packages.getApmPath(),
				args: args,
				stdout: function (output) {
				},
				stderr: function (output) {
				},
				exit: exit
			});
		};

		AdvancedFileView.prototype.replacePackage = function () {
			var info;
			info = atom.notifications.addInfo('Installing advanced-open-file...');
			return this.executeApm(['install', 'advanced-open-file'], (function (_this) {
				return function (exitCode) {
					if (exitCode === 1) {
						info.dismiss();
						return atom.notifications.addError('Failed to install advanced-open-file, please install it manually.');
					} else {
						return _this.executeApm(['uninstall', 'advanced-new-file'], function (exitCode) {
							info.dismiss();
							if (exitCode === 0) {
								atom.notifications.addSuccess('advanced-open-file installed successfully!', {
									detail: 'Atom will reload in a few seconds...'
								});
								return setTimeout((function () {
									return atom.reload();
								}), 3000);
							} else {
								return atom.notifications.addError('Failed to uninstall advanced-new-file, please uninstall it manually.');
							}
						});
					}
				};
			})(this));
		};

		return AdvancedFileView;

	})(View);

}).call(this);
