// Generated by CoffeeScript 1.12.0
(function () {
	var $, Dialog, TextEditorView, View, path, ref,
		extend = function (child, parent) {
			for (var key in parent) {
				if (hasProp.call(parent, key)) child[key] = parent[key];
			}
			function ctor() {
				this.constructor = child;
			}

			ctor.prototype = parent.prototype;
			child.prototype = new ctor();
			child.__super__ = parent.prototype;
			return child;
		},
		hasProp = {}.hasOwnProperty;

	ref = require('atom-space-pen-views'), $ = ref.$, TextEditorView = ref.TextEditorView, View = ref.View;

	path = require('path');

	module.exports = Dialog = (function (superClass) {
		extend(Dialog, superClass);

		function Dialog() {
			return Dialog.__super__.constructor.apply(this, arguments);
		}

		Dialog.content = function (arg) {
			var prompt;
			prompt = (arg != null ? arg : {}).prompt;
			return this.div({
				"class": 'tree-view-dialog'
			}, (function (_this) {
				return function () {
					_this.label(prompt, {
						"class": 'icon',
						outlet: 'promptText'
					});
					_this.subview('miniEditor', new TextEditorView({
						mini: true
					}));
					return _this.div({
						"class": 'error-message',
						outlet: 'errorMessage'
					});
				};
			})(this));
		};

		Dialog.prototype.initialize = function (arg) {
			var baseName, extension, iconClass, initialPath, range, ref1, select, selectionEnd;
			ref1 = arg != null ? arg : {}, initialPath = ref1.initialPath, select = ref1.select, iconClass = ref1.iconClass;
			if (iconClass) {
				this.promptText.addClass(iconClass);
			}
			atom.commands.add(this.element, {
				'core:confirm': (function (_this) {
					return function () {
						return _this.onConfirm(_this.miniEditor.getText());
					};
				})(this),
				'core:cancel': (function (_this) {
					return function () {
						return _this.cancel();
					};
				})(this)
			});
			this.miniEditor.on('blur', (function (_this) {
				return function () {
					if (document.hasFocus()) {
						return _this.close();
					}
				};
			})(this));
			this.miniEditor.getModel().onDidChange((function (_this) {
				return function () {
					return _this.showError();
				};
			})(this));
			this.miniEditor.getModel().setText(initialPath);
			if (select) {
				extension = path.extname(initialPath);
				baseName = path.basename(initialPath);
				if (baseName === extension) {
					selectionEnd = initialPath.length;
				} else {
					selectionEnd = initialPath.length - extension.length;
				}
				range = [[0, initialPath.length - baseName.length], [0, selectionEnd]];
				return this.miniEditor.getModel().setSelectedBufferRange(range);
			}
		};

		Dialog.prototype.attach = function () {
			this.panel = atom.workspace.addModalPanel({
				item: this.element
			});
			this.miniEditor.focus();
			return this.miniEditor.getModel().scrollToCursorPosition();
		};

		Dialog.prototype.close = function () {
			var panelToDestroy;
			panelToDestroy = this.panel;
			this.panel = null;
			if (panelToDestroy != null) {
				panelToDestroy.destroy();
			}
			return atom.workspace.getActivePane().activate();
		};

		Dialog.prototype.cancel = function () {
			this.close();
			return $('.tree-view').focus();
		};

		Dialog.prototype.showError = function (message) {
			if (message == null) {
				message = '';
			}
			this.errorMessage.text(message);
			if (message) {
				return this.flashError();
			}
		};

		return Dialog;

	})(View);

}).call(this);
