// Generated by CoffeeScript 1.12.0
(function () {
	var CompositeDisposable, WebEditorView, url;

	CompositeDisposable = require('atom').CompositeDisposable;

	WebEditorView = require('./web-editor-view');

	url = require('url');

	module.exports = {
		activate: function (state) {
			var editor, element, pane, paneElement, self, subscription, textEditor, textEditorElement;
			this.disposable = new CompositeDisposable();
			pane = atom.workspace.getActivePane();
			paneElement = atom.views.getView(pane);
			textEditor = atom.workspace.getActiveTextEditor();
			textEditorElement = atom.views.getView(textEditor);
			subscription = atom.commands.add('atom-workspace', {
				'web-view:toggle': (function (_this) {
					return function () {
						return _this.toggle();
					};
				})(this),
				'web-view:reload': (function (_this) {
					return function () {
						return _this.reload();
					};
				})(this)
			});
			this.disposable.add(atom.workspace.addOpener(function (uri) {
				if (uri === "view://web") {
					return new WebEditorView();
				}
			}));
			this.disposable.add(atom.views.addViewProvider(WebEditorView, paneElement));
			this.editor = editor = atom.workspace.buildTextEditor();
			element = atom.views.getView(editor);
			element.setAttribute('mini', '');
			self = this;
			element.addEventListener('keydown', function (e) {
				if (e.keyCode === 13) {
					atom.commands.dispatch(editor, 'core:confirm');
					self.hide();
				}
				if (e.keyCode === 27) {
					atom.commands.dispatch(editor, 'core:cancel');
					return self.hide();
				}
			});
			this.disposable.add(atom.commands.add(editor, {
				'core:confirm': this.confirm,
				'core:cancel': this.cancel
			}));
			this.panel = atom.workspace.addModalPanel({
				item: editor,
				visible: false
			});
			return this.disposable.add(subscription);
		},
		deactivate: function () {
			this.disposable.dispose();
			this.panel.destroy();
			return this.element.destroy();
		},
		confirm: function (event) {
			var pane, text;
			pane = atom.workspace.getActivePane();
			text = this.getText();
			if (pane.activeItem instanceof WebEditorView) {
				return pane.activeItem.relocate(text);
			} else {
				return atom.notifications.addError("Web View must be the active item.");
			}
		},
		reload: function (event) {
			var pane;
			pane = atom.workspace.getActivePane();
			if (pane.activeItem instanceof WebEditorView) {
				return pane.activeItem.element.contentWindow.location.reload();
			}
		},
		cancel: function (event) {
			return atom.workspace.panelForItem(this).hide();
		},
		show: function () {
			atom.workspace.open("view://web");
			this.panel.show();
			return atom.views.getView(this.editor).focus();
		},
		hide: function () {
			return this.panel.hide();
		},
		toggle: function () {
			if (this.panel.isVisible()) {
				return this.hide();
			} else {
				return this.show();
			}
		}
	};

}).call(this);
