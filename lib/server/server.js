// Generated by CoffeeScript 1.12.1
(function () {
	var AtomLiveServer, allowUnsafeEval, liveServer, path, fs;
	path = require('path');
	fs = require('fs');
	allowUnsafeEval = require('loophole').allowUnsafeEval;
	liveServer = allowUnsafeEval(function () {
		return require("live-server");
	});

	module.exports = AtomLiveServer = {
		subscriptions: null,
		servers: null,
		activate: function (subscriptions) {
			this.subscriptions = subscriptions;
			this.servers = {};
			return this.subscriptions.add(atom.commands.add('atom-workspace', {
				'vx-server:start-3000': (function (_this) {
					return function () {
						return _this.startServer(3000);
					};
				})(this),
				'vx-server:start-4000': (function (_this) {
					return function () {
						return _this.startServer(4000);
					};
				})(this),
				'vx-server:start-5000': (function (_this) {
					return function () {
						return _this.startServer(5000);
					};
				})(this),
				'vx-server:start-8000': (function (_this) {
					return function () {
						return _this.startServer(8000);
					};
				})(this),
				'vx-server:start-9000': (function (_this) {
					return function () {
						return _this.startServer(9000);
					};
				})(this)
			}));
		},
		deactivate: function () {
			this.subscriptions = null;
		},
		getPaths: function () {
			var activeProjectPath, file, filePath, paneItem, projectPaths, ref;
			paneItem = atom.workspace.getActivePaneItem();
			file = paneItem != null ? (ref = paneItem.buffer) != null ? ref.file : void 0 : void 0;
			filePath = file != null ? file.path : void 0;
			projectPaths = atom.project.getPaths();
			activeProjectPath = null;
			if (filePath) {
				projectPaths.forEach(function (projectPath) {
					if (filePath.indexOf(projectPath) !== -1) {
						return activeProjectPath = projectPath;
					}
				});
			} else {
				activeProjectPath = projectPaths[0];
				filePath = "";
			}
			return activeProjectPath;
		},
		startServer: function (port) {
			var params, projectPath, middleware = [], self = this;
			projectPath = this.getPaths();
			if (!projectPath) {
				atom.notifications.addWarning("[Live Server] You haven't opened a Project, you must open one.");
				return;
			}
			//parse json
			middleware.push(function (req, res, next) {
				var url = req.url, uri;
				if (/\.do(\?\w+=\w+)?$/.test(url)) {
					uri = url.replace(/.*\/(.*)\.do/, "$1.json");
					uri = path.join(projectPath, "data", uri);
					fs.readFile(uri, "utf8", function (err, text) {
						if (err) {
							self.resposeJson(500, res, err);
						} else {
							self.resposeJson(200, res, text);
						}
					});
				} else {
					next();
				}
			});
			params = {
				port: port,
				root: projectPath,
				open: true,
				middleware: middleware
			};
			return allowUnsafeEval(function () {
				return liveServer.start(params);
			});
		},
		resposeJson(status, res, text){
			res.statusCode = status;
			var chunk = new Buffer(text, "utf8");
			res.setHeader("Content-length", chunk.length);
			res.setHeader("Content-Type", "application/json;charset:UTF-8");
			res.setHeader("Date", new Date());
			res.end(chunk, "utf8");
		}
	};

}).call(this);
